/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import javax.swing.ImageIcon;

/**
 *
 * @author Thusitha
 */
public class ClockPanel extends javax.swing.JPanel {
    ClockHandLayer chl;
    ImageIcon imageIcon;
    Color backColor;
    /**
     * Creates new form ClockPanel
     */
    public ClockPanel() {
        initComponents();
        chl = new ClockHandLayer();
        this.setLayout(new BorderLayout());
        this.add(chl);
        chl.setMainColor(Color.magenta);
        this.imageIcon=null;
        this.backColor=new Color(35, 35, 35);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
        DrawClock(g);
    }

    private void DrawClock(Graphics g) {
        g.setColor(backColor);
        g.fillRect(0, 0, getWidth(), getHeight());
        if (imageIcon!=null) {
            try {
            g.drawImage(new ImageIcon(this.imageIcon.getImage().getScaledInstance(getWidth(), getHeight(), Image.SCALE_SMOOTH)).getImage(), 0, 0, this);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        Point mid = new Point(getWidth() / 2, getHeight() / 2);
        int realRadius = getHeight() > getWidth() ? getWidth() / 2 : getHeight() / 2;
        int radius = getHeight() > getWidth() ? getWidth() / 2 : getHeight() / 2;
        radius -= radius * 0.12;
        int fontSize = (int) (0.15 * radius);
        Point[] pt = new Point[2];
        pt[0] = new Point(getWidth() / 2, getHeight() / 2);
        g.setColor(new Color(0, 0, 0, 80));
        g.fillOval(mid.x-(realRadius)+fontSize/4, mid.y-(realRadius), realRadius*2, realRadius*2);
        g.setColor(Color.white);
        Graphics2D g2 = (Graphics2D) g;
        g2.setStroke(new BasicStroke(fontSize/4));
        g2.setColor(new Color(chl.getMainColor().getRed(),
                chl.getMainColor().getGreen(),
                chl.getMainColor().getBlue(),
                40));
        Shape oval = new Ellipse2D.Float(mid.x-(realRadius)+fontSize/3, mid.y-(realRadius)+(fontSize/8),
                (realRadius*2)-(fontSize/4), (realRadius*2)-(fontSize/4));
        //g.drawOval(mid.x-(realRadius)+fontSize/4, mid.y-(realRadius), realRadius*2, realRadius*2);
        g2.draw(oval);
        int[] iClockLabel = new int[]{6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7};
        int i = 0, j=0;
        for (int iAngle = 1; iAngle <= 360; iAngle += 15) {
            Point p = new Point((int) (mid.x + (radius * Math.sin(iAngle * Math.PI / 180))), (int) (mid.y + (radius * Math.cos(iAngle * Math.PI / 180))));
            if (j%2 == 0) {
                g.setColor(Color.white);
                g.setFont(new Font("Arial", Font.BOLD, fontSize));
                g.drawString(iClockLabel[i] + "", p.x, p.y + fontSize / 2);
                i++;
            } else {
                g.setColor(chl.getMainColor());
                //g.drawOval(p.x, p.y, , 5);
                g.fillOval(p.x, p.y, fontSize/4, fontSize/4);
            }
            j++;
        }
    }
    
    public void setBackgroundImage(ImageIcon imageIcon){
        this.imageIcon=imageIcon;
    }

    public static void main(String[] args) {
        System.out.println("" + Math.sin(360 * 180 / Math.PI));
    }

    public Color getMainColor() {
        return chl.getMainColor();
    }

    public void setMainColor(Color mainColor) {
        this.chl.setMainColor(mainColor);
    }
    
    @Override
    public void setBackground(Color color){
        this.backColor=color;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
